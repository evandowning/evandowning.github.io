<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Evan Downing - malware</title><link href="https://www.evandowning.com/" rel="alternate"></link><link href="https://www.evandowning.com/feeds/malware.atom.xml" rel="self"></link><id>https://www.evandowning.com/</id><updated>2022-09-10T00:00:00-04:00</updated><subtitle>Cybersecurity Researcher</subtitle><entry><title>Malright: Malware Written the Right Way</title><link href="https://www.evandowning.com/malright-malware-written-the-right-way.html" rel="alternate"></link><published>2022-09-10T00:00:00-04:00</published><updated>2022-09-10T00:00:00-04:00</updated><author><name>Evan Downing</name></author><id>tag:www.evandowning.com,2022-09-10:/malright-malware-written-the-right-way.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;https://github.com/evandowning/mighty-morphin-malware&lt;/p&gt;
&lt;p&gt;Lots of malware have been written over the &lt;a href="https://github.com/evandowning/usable-malware"&gt;past three decades&lt;/a&gt;. But what have we really learned?&lt;/p&gt;
&lt;p&gt;It use to be that malware was custom-built by hackers for fun (and then for profit).&lt;/p&gt;
&lt;p&gt;But is this the best way to write malware?&lt;/p&gt;
&lt;p&gt;Writing custom …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;https://github.com/evandowning/mighty-morphin-malware&lt;/p&gt;
&lt;p&gt;Lots of malware have been written over the &lt;a href="https://github.com/evandowning/usable-malware"&gt;past three decades&lt;/a&gt;. But what have we really learned?&lt;/p&gt;
&lt;p&gt;It use to be that malware was custom-built by hackers for fun (and then for profit).&lt;/p&gt;
&lt;p&gt;But is this the best way to write malware?&lt;/p&gt;
&lt;p&gt;Writing custom routines that encrypt network traffic or obfuscate a binary is always a bad idea.
Instead, malware should be written using the same standards that benign software is written.&lt;/p&gt;
&lt;p&gt;For instance, I've seen so many recent malware using rc4 and rot-13 that I believed I had traveled back in time for a moment.&lt;/p&gt;
&lt;h2&gt;The Goal&lt;/h2&gt;
&lt;p&gt;I'm always looking for ways to push this field forward by raising the bar for defenses.&lt;/p&gt;
&lt;p&gt;In this post, I dive into various malicious techniques that are often used by malware.&lt;/p&gt;
&lt;p&gt;However, instead of writing my own custom routines, I will be deriving all of my code from legitimate software.&lt;/p&gt;
&lt;p&gt;Why you ask? Because we want to mimic benign software as much as possible, so it makes it difficult for detection mechanisms to catch us.
Mimicry and polymorphic blending attacks were first considered in academic back in the early 2000s -- so let's actually use these concepts to help us.&lt;/p&gt;
&lt;p&gt;There are (generally) three ways to detect malware -- statically, dynamically, or via network traffic.&lt;/p&gt;
&lt;h2&gt;Ethical Considerations&lt;/h2&gt;
&lt;p&gt;To the reader, this may sound ethically questionable at best. How am I helping, rather than hurting, the state of cybersecurity?&lt;/p&gt;
&lt;p&gt;If I see another ROT13 routine in malware, I'm going to vomit.&lt;/p&gt;
&lt;p&gt;Question: &lt;em&gt;Won't malware authors use your code to reek havoc on the Internet?&lt;/em&gt;
  * Answer: This is an over exaggeration, but a good question. The short answer is no. The long answer is no, because this malware still requires mechanisms to infect and spread (e.g., via exploits, social engineering, etc.) I do not provide these with this malware because it is out of scope of the goals of this work.&lt;/p&gt;
&lt;p&gt;Question: &lt;em&gt;Why are you open-sourcing this?&lt;/em&gt;
  * Answer: This is the most beneificial and ethical way of doing it. Consider &lt;a href="https://github.com/gentilkiwi/mimikatz"&gt;mimikatz&lt;/a&gt;. If it was such an unethical toolkit, why does Github (or Microsoft for that matter) not take it down? What about &lt;a href="https://github.com/Visgean/Zeus"&gt;Zeus&lt;/a&gt;? Open-sourcing it gives analysts and antivirus companies plenty of opportunities to test and evaluate their systems so they can protect their customers. Bringing it outwards, why aren't firearm manufacturers libel for damages caused by their products? It's because of &lt;em&gt;how&lt;/em&gt; they are used that is unethical. Shooting for sport seems to be a socially acceptable use for firearms, as is for self-defense in certain contexts (but that specific debate is off topic for my anecdote to malware).&lt;/p&gt;
&lt;p&gt;Question: &lt;em&gt;What are you doing to prevent harm to others?&lt;/em&gt;
  * Answer: I do three things: (1) open-source the repository and binaries, (2) submit the binaries to VirusTotal regularly so that antivirus companies have a chance to analyze and defend against it, (3) I write about its capabilities in detail to help malware analysts understand what it does so they can more easily evaluate their own toolkits and (again) add to their company's defenses. Finally, I provide yara rules for detecting artifacts of this malware that can easily be added to any detection engine.&lt;/p&gt;
&lt;h2&gt;Dynamic Analysis&lt;/h2&gt;
&lt;h3&gt;System&lt;/h3&gt;
&lt;p&gt;We will address all three so that our malware blends in.&lt;/p&gt;
&lt;p&gt;We'll also be ensuring our malware can run across different environments.
Why write code to ransom a Windows machine, when we can do the same for MacOS and Linux?&lt;/p&gt;
&lt;p&gt;Implement various malicious techniques:
Process injection
Persistence
Network communication
Packing/Obfuscation
Ransomware
Scan memory for credit card data
Stealing passwords
Remote desktop&lt;/p&gt;
&lt;p&gt;"Malright" - the right way to write malware
implement techniques from open-source benign software (i.e., mimicry as much as possible)
lightweight (small codebase)
modify static features for polymorphism
get dynamic features to be polymorphic as well
works across any platform with ease
windows, mac, linux, android, ios&lt;/p&gt;
&lt;p&gt;Look at https://0x00sec.org/c/malware/56 for inspiration.&lt;/p&gt;
&lt;h3&gt;Network&lt;/h3&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;h2&gt;Making it Cross-Platform&lt;/h2&gt;
&lt;p&gt;Now that our malware works in Windows, let's get it to work for the other popular operating systems; namely MacOS, Linux, Android, and iOS.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, I've detailed the components of a malware which has been written (in my opinion) the right way. It takes into account the fundamental challenges of malware analysis and detection, while keeping it modular for future operating systems.&lt;/p&gt;
&lt;p&gt;This malware draws inspiration from theory and practice. It notes and fixes deficiencies with prior malware.&lt;/p&gt;
&lt;p&gt;However, this malware is not bullet-proof. There are still ways to detect it. For example, a rule-based detector can combine multiple actions the malware carries out and denotes that combination as malicious, while keeping false positives low (e.g., what legitimate software encrypts your hard drive &lt;em&gt;and&lt;/em&gt; changes your desktop background &lt;em&gt;and&lt;/em&gt; deletes the original files?).&lt;/p&gt;
&lt;p&gt;You can download and try out the sample yourself at: &lt;a href="https://github.com/evandowning/malright/"&gt;https://github.com/evandowning/malright/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;</content><category term="malware"></category><category term="malware"></category></entry><entry><title>Documenting Malware for Research</title><link href="https://www.evandowning.com/documenting-malware-for-research.html" rel="alternate"></link><published>2022-09-08T00:00:00-04:00</published><updated>2022-09-08T00:00:00-04:00</updated><author><name>Evan Downing</name></author><id>tag:www.evandowning.com,2022-09-08:/documenting-malware-for-research.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When I first began my PhD, my advisor suggested I go through various malware source codes (released openly on the Internet) to compile, execute, understand, and document them for future use.&lt;/p&gt;
&lt;p&gt;This inevitably paid off, in that it helped me more easily create ground-truth for my datasets and experiments …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When I first began my PhD, my advisor suggested I go through various malware source codes (released openly on the Internet) to compile, execute, understand, and document them for future use.&lt;/p&gt;
&lt;p&gt;This inevitably paid off, in that it helped me more easily create ground-truth for my datasets and experiments.&lt;/p&gt;
&lt;p&gt;Over the years, I've built up a repository of malware source code, along with compilation instructions and documentation on how to run and use the malware -- overall, how the malware works on the inside.&lt;/p&gt;
&lt;p&gt;I've been asked by various colleagues to open-source this repo to aid in the education and research of malware analysis and detection.&lt;/p&gt;
&lt;h2&gt;Why is this difficult?&lt;/h2&gt;
&lt;p&gt;There are many places to get malware source code from. At the time of this writing, these are two of the most popular sources today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thezoo.morirt.com/"&gt;theZoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vxunderground/MalwareSourceCode"&gt;vxunderground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's great is that these repos contain malware sources as they originally existed when they were leaked or released.&lt;/p&gt;
&lt;p&gt;What's not so great is that these malware source repositories are not clean. They contain lots of garbage files (e.g., temporary files, database files, incomplete source files, etc.) and the documentation on how to compile and use them is either incomplete or non-existent.&lt;/p&gt;
&lt;p&gt;In addition, not all malware run on the same operating system. There are malware for Windows, MacOS, Linux, Android, and iOS. Some Windows malware assume Windows XP, while others assume Windows 10. Some malware even assume specific software versions, in order to exploit that particular version. Thus any released code must be able to compile and execute the malware as it was intended -- which is not an easy feat. The documentation must include instructions on how to set up complete environments so that the malware will behave as the author expected it to.&lt;/p&gt;
&lt;p&gt;My goal is to create a git repo where I can share these same malware source files, but accompany them with good documentation on how to operate them.
The sole purpose is to facilitate an easy way for a researcher to test their solutions (e.g., dynamic analysis, static analysis, malware detection, etc.) on real-world malware samples, straight from the source. This allows the researcher complete control over the sample, so they can experiment with it in a safe environment.&lt;/p&gt;
&lt;h2&gt;What's the plan?&lt;/h2&gt;
&lt;p&gt;This blog series will dive deep into the history of malware.&lt;/p&gt;
&lt;p&gt;Over time I will release more samples as I clean and document them.&lt;/p&gt;
&lt;p&gt;Some posts may be out of order chronologically, and some may be incomplete as I add more malware and content.&lt;/p&gt;
&lt;p&gt;Consider this series as a constant work-in-progress.&lt;/p&gt;
&lt;h2&gt;Where can I follow this?&lt;/h2&gt;
&lt;p&gt;I will be releasing all source code and documentation here: &lt;a href="https://github.com/evandowning/usable-malware"&gt;https://github.com/evandowning/usable-malware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will be blogging about each sample here on my website: &lt;a href="https://www.evandowning.com/tag/usable-malware.html"&gt;https://www.evandowning.com/tag/usable-malware.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;This is going to be a long process, and will be accomplished during my free time.&lt;/p&gt;
&lt;p&gt;What will take time is documenting how a researcher without access to older versions of VisualStudio (which some of these malware require) will compile and use these samples. I will likely need to update the sample sources to be compatible with the newest versions of Visual Studio. I also plan to write &lt;a href="https://resources.github.com/ci-cd/"&gt;CI/CD&lt;/a&gt; pipelines to ensure the malware doesn't breaking in the future.&lt;/p&gt;
&lt;p&gt;If you have any complaints of incomplete or incorrect documentation, please open an issue in the git repo above.&lt;/p&gt;
&lt;p&gt;If you have any contributions, please create a pull request.&lt;/p&gt;
&lt;p&gt;I hope this is useful for you.&lt;/p&gt;</content><category term="malware"></category><category term="malware"></category><category term="usable-malware"></category></entry></feed>